{"version":3,"file":"agm-drawing.js","sources":["ng://@agm/drawing/directives/drawing-manager.ts","ng://@agm/drawing/directives/drawing-manager-trigger.ts","ng://@agm/drawing/drawing.module.ts","ng://@agm/drawing/google-drawing-types.ts","ng://@agm/drawing/agm-drawing.ts"],"sourcesContent":["import { Circle, CircleOptions, GoogleMap, MapsEventListener, Marker, MarkerOptions, MVCObject, Polygon, PolygonOptions, Polyline, PolylineOptions, Rectangle, RectangleOptions } from '@agm/core/services/google-maps-types';\r\nimport { Directive, EventEmitter, Input, isDevMode, NgZone, OnChanges, OnDestroy, Output, SimpleChanges } from '@angular/core';\r\nimport { fromEventPattern, Observable, Subscription } from 'rxjs';\r\nimport { DrawingControlOptions, OverlayCompleteEvent, OverlayType } from '../google-drawing-types';\r\n\r\ndeclare var google: any;\r\n\r\n@Directive({\r\n  selector: 'agm-drawing-manager',\r\n  exportAs: 'agmDrawingManager',\r\n})\r\nexport class AgmDrawingManager implements OnChanges, OnDestroy{\r\n\r\n  /**\r\n   * The enabled/disabled state of the drawing control. Defaults to `true`.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  @Input() drawingControl: boolean;\r\n\r\n  /**\r\n   * The DrawingManager's drawing mode, which defines the type of overlay to be\r\n   * added on the map. A drawing mode of null means that the user can interact\r\n   * with the map as normal, and clicks do not draw anything.\r\n   */\r\n  @Input() drawingMode: OverlayType | null;\r\n\r\n  /**\r\n   * The display options for the drawing control.\r\n   *\r\n   * @type {DrawingControlOptions}\r\n   */\r\n  @Input() drawingControlOptions: DrawingControlOptions;\r\n\r\n  /**\r\n   * Options to apply to any new circles created with this DrawingManager.\r\n   * The `center` and `radius` properties are ignored, and the `map` property of a\r\n   * new circle is always set to the DrawingManager's map.\r\n   *\r\n   * @type {CircleOptions}\r\n   */\r\n  @Input() circleOptions: CircleOptions;\r\n\r\n  /**\r\n   * Options to apply to any new markers created with this DrawingManager.\r\n   * The `position` property is ignored, and the `map` property of a new marker\r\n   * is always set to the DrawingManager's map.\r\n   *\r\n   * @type {MarkerOptions}\r\n   */\r\n  @Input() markerOptions: MarkerOptions;\r\n\r\n  /**\r\n   * Options to apply to any new polygons created with this DrawingManager.\r\n   * The `paths` property is ignored, and the map property of a new polygon is\r\n   * always set to the DrawingManager's map.\r\n   *\r\n   * @type {PolygonOptions}\r\n   */\r\n  @Input() polygonOptions: PolygonOptions;\r\n\r\n  /**\r\n   * Options to apply to any new polylines created with this DrawingManager.\r\n   * The `path` property is ignored, and the map property of a new polyline is\r\n   * always set to the DrawingManager's map.\r\n   *\r\n   * @type {PolylineOptions}\r\n   * @memberof AgmDrawingManager\r\n   */\r\n  @Input() polylineOptions: PolylineOptions;\r\n\r\n  /**\r\n   * Options to apply to any new rectangles created with this DrawingManager.\r\n   * The `bounds` property is ignored, and the map property of a new rectangle\r\n   * is always set to the DrawingManager's map.\r\n   *\r\n   * @type {RectangleOptions}\r\n   * @memberof AgmDrawingManager\r\n   */\r\n  @Input() rectangeOptions: RectangleOptions;\r\n\r\n  /**\r\n   * This event is fired when the user has finished drawing a circle.\r\n   */\r\n  @Output() circleComplete = new EventEmitter<Circle>();\r\n\r\n  /**\r\n   * This event is fired when the user has finished drawing a marker.\r\n   */\r\n  @Output() markerComplete = new EventEmitter<Marker>();\r\n\r\n  /**\r\n   * This event is fired when the user has finished drawing an overlay of any\r\n   * type.\r\n   */\r\n  @Output() overlayComplete = new EventEmitter<OverlayCompleteEvent>();\r\n\r\n  /**\r\n   * This event is fired when the user has finished drawing a polygon.\r\n   */\r\n  @Output() polygonComplete = new EventEmitter<Polygon>();\r\n\r\n  /**\r\n   * This event is fired when the user has finished drawing a polyline.\r\n   */\r\n  @Output() polylineComplete = new EventEmitter<Polyline>();\r\n\r\n  /**\r\n   * This event is fired when the user has finished drawing a rectangle.\r\n   */\r\n  @Output() rectangleComplete = new EventEmitter<Rectangle>();\r\n\r\n  private eventSubscriptions: Subscription[] = [];\r\n\r\n  private drawingManager: any;\r\n\r\n  constructor(private _zone: NgZone) {\r\n  }\r\n\r\n  setMap(map: GoogleMap) {\r\n    if (!google.maps.drawing && isDevMode()) {\r\n      console.error('Cannot use drawing manager if drawing library is not ' +\r\n        'loaded. To fix, add libraries: [\\'drawing\\'] to the ' +\r\n        'lazyMapsAPILoaderConfig you passed to AgmCoreModule.forRoot');\r\n      return;\r\n    }\r\n    if (map && !this.drawingManager) {\r\n      this.drawingManager = new google.maps.drawing.DrawingManager({\r\n          map,\r\n          circleOptions: this.circleOptions,\r\n          markerOptions: this.markerOptions,\r\n          polygonOptions: this.polygonOptions,\r\n          polylineOptions: this.polylineOptions,\r\n          rectangeOptions: this.rectangeOptions,\r\n          drawingControl: this.drawingControl,\r\n          drawingControlOptions: this.drawingControlOptions,\r\n          drawingMode: this.drawingMode,\r\n      });\r\n      this.initEvents(this.drawingManager);\r\n    } else if (!map && this.drawingManager) {\r\n      this.drawingManager.setMap(null);\r\n    }\r\n    // else do nothing\r\n  }\r\n\r\n  initEvents(drawingManager: any) {\r\n    this.eventSubscriptions.push(\r\n      this.createMvcObservable<Circle>('circlecomplete', drawingManager)\r\n      .subscribe(circle => this._zone.run(() => this.circleComplete.next(circle)))\r\n    );\r\n    this.eventSubscriptions.push(\r\n      this.createMvcObservable<Marker>('markercomplete', drawingManager)\r\n      .subscribe(marker => this._zone.run(() => this.markerComplete.next(marker)))\r\n    );\r\n    this.eventSubscriptions.push(\r\n      this.createMvcObservable<Polygon>('polygoncomplete', drawingManager)\r\n      .subscribe(polygon => this._zone.run(() => this.polygonComplete.next(polygon)))\r\n    );\r\n    this.eventSubscriptions.push(\r\n      this.createMvcObservable<Polyline>('polylinecomplete', drawingManager)\r\n      .subscribe(polyline => this._zone.run(() => this.polylineComplete.next(polyline)))\r\n    );\r\n    this.eventSubscriptions.push(\r\n      this.createMvcObservable<OverlayCompleteEvent>('overlaycomplete', drawingManager)\r\n      .subscribe(overlayevent => this._zone.run(() => this.overlayComplete.next(overlayevent)))\r\n    );\r\n    this.eventSubscriptions.push(\r\n      this.createMvcObservable<Rectangle>('rectanglecomplete', drawingManager)\r\n      .subscribe(rectangle => this._zone.run(() => this.rectangleComplete.next(rectangle)))\r\n    );\r\n  }\r\n\r\n  createMvcObservable<E>(eventName: string, mvcObject: MVCObject): Observable<E> {\r\n    return fromEventPattern(\r\n      handler => mvcObject.addListener(eventName,\r\n        (event?: E) => handler.apply(null, [event])),\r\n      (_handler: Function, evListener: MapsEventListener) => evListener.remove()\r\n    );\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.drawingManager) {\r\n      return;\r\n    }\r\n\r\n    const options = Object.entries(changes)\r\n    .map(([prop, change]) => [prop, change.currentValue])\r\n    .reduce((obj: any, [propName, propValue]) => {\r\n      obj[propName] = propValue;\r\n      return obj;\r\n    }, {});\r\n    this.drawingManager.setOptions(options);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.eventSubscriptions.forEach(subscription => subscription.unsubscribe());\r\n  }\r\n\r\n}\r\n","import { AgmMap } from '@agm/core';\r\nimport { AfterViewInit, Directive, Host, Input, OnDestroy } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\nimport { AgmDrawingManager } from './drawing-manager';\r\n\r\n@Directive({\r\n  selector: 'agm-map[agmDrawingManager]',\r\n  exportAs: 'matDrawingManagerTrigger',\r\n})\r\nexport class AgmDrawingManagerTrigger implements AfterViewInit, OnDestroy{\r\n\r\n  /** The drawing manager to be attached to this trigger. */\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('agmDrawingManager') drawingManager: AgmDrawingManager;\r\n\r\n  constructor(@Host() private _agmMap: AgmMap) {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._agmMap.mapReady.pipe(first()).subscribe(map => this.drawingManager.setMap(map));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._agmMap.mapReady.pipe(first()).subscribe(() => this.drawingManager.setMap(null));\r\n  }\r\n}\r\n","import { AgmCoreModule } from '@agm/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { AgmDrawingManager } from './directives/drawing-manager';\r\nimport { AgmDrawingManagerTrigger } from './directives/drawing-manager-trigger';\r\n\r\n@NgModule({\r\n  imports: [AgmCoreModule],\r\n  declarations: [AgmDrawingManager, AgmDrawingManagerTrigger],\r\n  exports: [AgmDrawingManager, AgmDrawingManagerTrigger],\r\n})\r\nexport class AgmDrawingModule {\r\n}\r\n","import { Circle, ControlPosition, Marker, Polygon, Polyline, Rectangle } from '@agm/core/services/google-maps-types';\r\n\r\nexport enum OverlayType {\r\n  CIRCLE = 'circle',\r\n  MARKER = 'marker',\r\n  POLYGONE = 'polygon',\r\n  POLYLINE = 'polyline',\r\n  RECTANGE = 'rectangle',\r\n}\r\n\r\nexport interface DrawingControlOptions {\r\n  drawingModes?: OverlayType[];\r\n  position?: ControlPosition;\r\n}\r\n\r\nexport interface OverlayCompleteEvent {\r\n  overlay: Marker | Polygon | Polyline | Rectangle | Circle;\r\n  type: OverlayType;\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}