import { fromEventPattern } from 'rxjs';
export function createMVCEventObservable(array) {
    const eventNames = ['insert_at', 'remove_at', 'set_at'];
    return fromEventPattern((handler) => eventNames.map(evName => array.addListener(evName, (index, previous) => handler.apply(array, [{ 'newArr': array.getArray(), evName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));
}
export class MvcArrayMock {
    constructor() {
        this.vals = [];
        this.listeners = {
            'remove_at': [],
            'insert_at': [],
            'set_at': [],
        };
    }
    clear() {
        for (let i = this.vals.length - 1; i >= 0; i--) {
            this.removeAt(i);
        }
    }
    getArray() {
        return [...this.vals];
    }
    getAt(i) {
        return this.vals[i];
    }
    getLength() {
        return this.vals.length;
    }
    insertAt(i, elem) {
        this.vals.splice(i, 0, elem);
        this.listeners.insert_at.map(listener => listener(i));
    }
    pop() {
        const deleted = this.vals.pop();
        this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));
        return deleted;
    }
    push(elem) {
        this.vals.push(elem);
        this.listeners.insert_at.map(listener => listener(this.vals.length - 1));
        return this.vals.length;
    }
    removeAt(i) {
        const deleted = this.vals.splice(i, 1)[0];
        this.listeners.remove_at.map(listener => listener(i, deleted));
        return deleted;
    }
    setAt(i, elem) {
        const deleted = this.vals[i];
        this.vals[i] = elem;
        this.listeners.set_at.map(listener => listener(i, deleted));
    }
    forEach(callback) {
        this.vals.forEach(callback);
    }
    addListener(eventName, handler) {
        const listenerArr = this.listeners[eventName];
        listenerArr.push(handler);
        return {
            remove: () => {
                listenerArr.splice(listenerArr.indexOf(handler), 1);
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXZjYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWdtL2NvcmUvIiwic291cmNlcyI6WyJ1dGlscy9tdmNhcnJheS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFHcEQsTUFBTSxVQUFVLHdCQUF3QixDQUFJLEtBQWtCO0lBQzVELE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN4RCxPQUFPLGdCQUFnQixDQUNyQixDQUFDLE9BQWlCLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFDdEUsQ0FBQyxLQUFhLEVBQUUsUUFBWSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFFLEVBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNsSSxDQUFDLFFBQWtCLEVBQUUsV0FBZ0MsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEgsQ0FBQztBQVdELE1BQU0sT0FBTyxZQUFZO0lBQXpCO1FBQ1UsU0FBSSxHQUFRLEVBQUUsQ0FBQztRQUNmLGNBQVMsR0FLYjtZQUNGLFdBQVcsRUFBRSxFQUFnQjtZQUM3QixXQUFXLEVBQUUsRUFBZ0I7WUFDN0IsUUFBUSxFQUFFLEVBQWdCO1NBQzNCLENBQUM7SUFtREosQ0FBQztJQWxEQyxLQUFLO1FBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxD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Q0FBQyxDQUFDO1lBQ3hELENBQUM7U0FDSixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbUV2ZW50UGF0dGVybiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBNYXBzRXZlbnRMaXN0ZW5lciwgTVZDQXJyYXkgfSBmcm9tICcuLi9zZXJ2aWNlcy9nb29nbGUtbWFwcy10eXBlcyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTVZDRXZlbnRPYnNlcnZhYmxlPFQ+KGFycmF5OiBNVkNBcnJheTxUPik6IE9ic2VydmFibGU8TVZDRXZlbnQ8VD4+e1xyXG4gIGNvbnN0IGV2ZW50TmFtZXMgPSBbJ2luc2VydF9hdCcsICdyZW1vdmVfYXQnLCAnc2V0X2F0J107XHJcbiAgcmV0dXJuIGZyb21FdmVudFBhdHRlcm4oXHJcbiAgICAoaGFuZGxlcjogRnVuY3Rpb24pID0+IGV2ZW50TmFtZXMubWFwKGV2TmFtZSA9PiBhcnJheS5hZGRMaXN0ZW5lcihldk5hbWUsXHJcbiAgICAgIChpbmRleDogbnVtYmVyLCBwcmV2aW91cz86IFQpID0+IGhhbmRsZXIuYXBwbHkoYXJyYXksIFsgeyduZXdBcnInOiBhcnJheS5nZXRBcnJheSgpLCBldk5hbWUsIGluZGV4LCBwcmV2aW91c30gYXMgTVZDRXZlbnQ8VD5dKSkpLFxyXG4gICAgKF9oYW5kbGVyOiBGdW5jdGlvbiwgZXZMaXN0ZW5lcnM6IE1hcHNFdmVudExpc3RlbmVyW10pID0+IGV2TGlzdGVuZXJzLmZvckVhY2goZXZMaXN0ZW5lciA9PiBldkxpc3RlbmVyLnJlbW92ZSgpKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTVZDRXZlbnQ8VD4ge1xyXG4gIG5ld0FycjogVFtdO1xyXG4gIGV2TmFtZTogTXZjRXZlbnRUeXBlO1xyXG4gIGluZGV4OiBudW1iZXI7XHJcbiAgcHJldmlvdXM/OiBUO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNdmNFdmVudFR5cGUgPSAnaW5zZXJ0X2F0JyB8ICdyZW1vdmVfYXQnIHwgJ3NldF9hdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgTXZjQXJyYXlNb2NrPFQ+IGltcGxlbWVudHMgTVZDQXJyYXk8VD4ge1xyXG4gIHByaXZhdGUgdmFsczogVFtdID0gW107XHJcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IHtcclxuICAgICdyZW1vdmVfYXQnOiBGdW5jdGlvbltdO1xyXG4gICAgJ2luc2VydF9hdCc6IEZ1bmN0aW9uW107XHJcbiAgICAnc2V0X2F0JzogRnVuY3Rpb25bXTtcclxuICAgIFtrZXk6IHN0cmluZ106IEZ1bmN0aW9uW107XHJcbiAgfSA9IHtcclxuICAgICdyZW1vdmVfYXQnOiBbXSBhcyBGdW5jdGlvbltdLFxyXG4gICAgJ2luc2VydF9hdCc6IFtdIGFzIEZ1bmN0aW9uW10sXHJcbiAgICAnc2V0X2F0JzogW10gYXMgRnVuY3Rpb25bXSxcclxuICB9O1xyXG4gIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgZm9yIChsZXQgaSA9IHRoaXMudmFscy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQXQoaSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldEFycmF5KCk6IFRbXSB7XHJcbiAgICByZXR1cm4gWy4uLnRoaXMudmFsc107XHJcbiAgfVxyXG4gIGdldEF0KGk6IG51bWJlcik6IFQge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsc1tpXTtcclxuICB9XHJcbiAgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy52YWxzLmxlbmd0aDtcclxuICB9XHJcbiAgaW5zZXJ0QXQoaTogbnVtYmVyLCBlbGVtOiBUKTogdm9pZCB7XHJcbiAgICB0aGlzLnZhbHMuc3BsaWNlKGksIDAsIGVsZW0pO1xyXG4gICAgdGhpcy5saXN0ZW5lcnMuaW5zZXJ0X2F0Lm1hcChsaXN0ZW5lciA9PiBsaXN0ZW5lcihpKSk7XHJcbiAgfVxyXG4gIHBvcCgpOiBUIHtcclxuICAgIGNvbnN0IGRlbGV0ZWQgPSB0aGlzLnZhbHMucG9wKCk7XHJcbiAgICB0aGlzLmxpc3RlbmVycy5yZW1vdmVfYXQubWFwKGxpc3RlbmVyID0+IGxpc3RlbmVyKHRoaXMudmFscy5sZW5ndGgsIGRlbGV0ZWQpKTtcclxuICAgIHJldHVybiBkZWxldGVkO1xyXG4gIH1cclxuICBwdXNoKGVsZW06IFQpOiBudW1iZXIge1xyXG4gICAgdGhpcy52YWxzLnB1c2goZWxlbSk7XHJcbiAgICB0aGlzLmxpc3RlbmVycy5pbnNlcnRfYXQubWFwKGxpc3RlbmVyID0+IGxpc3RlbmVyKHRoaXMudmFscy5sZW5ndGggLSAxKSk7XHJcbiAgICByZXR1cm4gdGhpcy52YWxzLmxlbmd0aDtcclxuICB9XHJcbiAgcmVtb3ZlQXQoaTogbnVtYmVyKTogVCB7XHJcbiAgICBjb25zdCBkZWxldGVkID0gdGhpcy52YWxzLnNwbGljZShpLCAxKVswXTtcclxuICAgIHRoaXMubGlzdGVuZXJzLnJlbW92ZV9hdC5tYXAobGlzdGVuZXIgPT4gbGlzdGVuZXIoaSwgZGVsZXRlZCkpO1xyXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XHJcbiAgfVxyXG4gIHNldEF0KGk6IG51bWJlciwgZWxlbTogVCk6IHZvaWQge1xyXG4gICAgY29uc3QgZGVsZXRlZCA9IHRoaXMudmFsc1tpXTtcclxuICAgIHRoaXMudmFsc1tpXSA9IGVsZW07XHJcbiAgICB0aGlzLmxpc3RlbmVycy5zZXRfYXQubWFwKGxpc3RlbmVyID0+IGxpc3RlbmVyKGksIGRlbGV0ZWQpKTtcclxuICB9XHJcbiAgZm9yRWFjaChjYWxsYmFjazogKGVsZW06IFQsIGk6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy52YWxzLmZvckVhY2goY2FsbGJhY2spO1xyXG4gIH1cclxuICBhZGRMaXN0ZW5lcihldmVudE5hbWU6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pOiBNYXBzRXZlbnRMaXN0ZW5lciB7XHJcbiAgICBjb25zdCBsaXN0ZW5lckFyciA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV07XHJcbiAgICBsaXN0ZW5lckFyci5wdXNoKGhhbmRsZXIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmU6ICgpID0+IHtcclxuICAgICAgICAgICAgbGlzdGVuZXJBcnIuc3BsaWNlKGxpc3RlbmVyQXJyLmluZGV4T2YoaGFuZGxlciksIDEpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=